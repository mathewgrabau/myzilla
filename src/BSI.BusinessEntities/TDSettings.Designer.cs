//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MyZilla.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("TDSettings")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class TDSettings : global::System.Data.DataSet {
        
        private ConnectionTypeDataTable tableConnectionType;
        
        private ConnectionDataTable tableConnection;
        
        private GlobalSettingsDataTable tableGlobalSettings;
        
        private PreferencesDataTable tablePreferences;
        
        private ColumnsDataTable tableColumns;
        
        private global::System.Data.DataRelation relationRel_ConnectionType;
        
        private global::System.Data.DataRelation relationRel_Conn;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TDSettings() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TDSettings(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ConnectionType"] != null)) {
                    base.Tables.Add(new ConnectionTypeDataTable(ds.Tables["ConnectionType"]));
                }
                if ((ds.Tables["Connection"] != null)) {
                    base.Tables.Add(new ConnectionDataTable(ds.Tables["Connection"]));
                }
                if ((ds.Tables["GlobalSettings"] != null)) {
                    base.Tables.Add(new GlobalSettingsDataTable(ds.Tables["GlobalSettings"]));
                }
                if ((ds.Tables["Preferences"] != null)) {
                    base.Tables.Add(new PreferencesDataTable(ds.Tables["Preferences"]));
                }
                if ((ds.Tables["Columns"] != null)) {
                    base.Tables.Add(new ColumnsDataTable(ds.Tables["Columns"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConnectionTypeDataTable ConnectionType {
            get {
                return this.tableConnectionType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConnectionDataTable Connection {
            get {
                return this.tableConnection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GlobalSettingsDataTable GlobalSettings {
            get {
                return this.tableGlobalSettings;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PreferencesDataTable Preferences {
            get {
                return this.tablePreferences;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ColumnsDataTable Columns {
            get {
                return this.tableColumns;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            TDSettings cln = ((TDSettings)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ConnectionType"] != null)) {
                    base.Tables.Add(new ConnectionTypeDataTable(ds.Tables["ConnectionType"]));
                }
                if ((ds.Tables["Connection"] != null)) {
                    base.Tables.Add(new ConnectionDataTable(ds.Tables["Connection"]));
                }
                if ((ds.Tables["GlobalSettings"] != null)) {
                    base.Tables.Add(new GlobalSettingsDataTable(ds.Tables["GlobalSettings"]));
                }
                if ((ds.Tables["Preferences"] != null)) {
                    base.Tables.Add(new PreferencesDataTable(ds.Tables["Preferences"]));
                }
                if ((ds.Tables["Columns"] != null)) {
                    base.Tables.Add(new ColumnsDataTable(ds.Tables["Columns"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableConnectionType = ((ConnectionTypeDataTable)(base.Tables["ConnectionType"]));
            if ((initTable == true)) {
                if ((this.tableConnectionType != null)) {
                    this.tableConnectionType.InitVars();
                }
            }
            this.tableConnection = ((ConnectionDataTable)(base.Tables["Connection"]));
            if ((initTable == true)) {
                if ((this.tableConnection != null)) {
                    this.tableConnection.InitVars();
                }
            }
            this.tableGlobalSettings = ((GlobalSettingsDataTable)(base.Tables["GlobalSettings"]));
            if ((initTable == true)) {
                if ((this.tableGlobalSettings != null)) {
                    this.tableGlobalSettings.InitVars();
                }
            }
            this.tablePreferences = ((PreferencesDataTable)(base.Tables["Preferences"]));
            if ((initTable == true)) {
                if ((this.tablePreferences != null)) {
                    this.tablePreferences.InitVars();
                }
            }
            this.tableColumns = ((ColumnsDataTable)(base.Tables["Columns"]));
            if ((initTable == true)) {
                if ((this.tableColumns != null)) {
                    this.tableColumns.InitVars();
                }
            }
            this.relationRel_ConnectionType = this.Relations["Rel_ConnectionType"];
            this.relationRel_Conn = this.Relations["Rel_Conn"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "TDSettings";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/TDSettings.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableConnectionType = new ConnectionTypeDataTable();
            base.Tables.Add(this.tableConnectionType);
            this.tableConnection = new ConnectionDataTable();
            base.Tables.Add(this.tableConnection);
            this.tableGlobalSettings = new GlobalSettingsDataTable();
            base.Tables.Add(this.tableGlobalSettings);
            this.tablePreferences = new PreferencesDataTable();
            base.Tables.Add(this.tablePreferences);
            this.tableColumns = new ColumnsDataTable();
            base.Tables.Add(this.tableColumns);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Connection_Columns", new global::System.Data.DataColumn[] {
                        this.tableConnection.ConnectionIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableColumns.ConnectionIdColumn});
            this.tableColumns.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationRel_ConnectionType = new global::System.Data.DataRelation("Rel_ConnectionType", new global::System.Data.DataColumn[] {
                        this.tableConnectionType.NameColumn}, new global::System.Data.DataColumn[] {
                        this.tableConnection.TypeColumn}, false);
            this.Relations.Add(this.relationRel_ConnectionType);
            this.relationRel_Conn = new global::System.Data.DataRelation("Rel_Conn", new global::System.Data.DataColumn[] {
                        this.tableConnection.ConnectionIdColumn}, new global::System.Data.DataColumn[] {
                        this.tablePreferences.ConnectionIdColumn}, false);
            this.Relations.Add(this.relationRel_Conn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConnectionType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConnection() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGlobalSettings() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePreferences() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeColumns() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            TDSettings ds = new TDSettings();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ConnectionTypeRowChangeEventHandler(object sender, ConnectionTypeRowChangeEvent e);
        
        public delegate void ConnectionRowChangeEventHandler(object sender, ConnectionRowChangeEvent e);
        
        public delegate void GlobalSettingsRowChangeEventHandler(object sender, GlobalSettingsRowChangeEvent e);
        
        public delegate void PreferencesRowChangeEventHandler(object sender, PreferencesRowChangeEvent e);
        
        public delegate void ColumnsRowChangeEventHandler(object sender, ColumnsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConnectionTypeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionTypeDataTable() {
                this.TableName = "ConnectionType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConnectionTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConnectionTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionTypeRow this[int index] {
                get {
                    return ((ConnectionTypeRow)(this.Rows[index]));
                }
            }
            
            public event ConnectionTypeRowChangeEventHandler ConnectionTypeRowChanging;
            
            public event ConnectionTypeRowChangeEventHandler ConnectionTypeRowChanged;
            
            public event ConnectionTypeRowChangeEventHandler ConnectionTypeRowDeleting;
            
            public event ConnectionTypeRowChangeEventHandler ConnectionTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConnectionTypeRow(ConnectionTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionTypeRow AddConnectionTypeRow(string Name) {
                ConnectionTypeRow rowConnectionTypeRow = ((ConnectionTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name};
                rowConnectionTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConnectionTypeRow);
                return rowConnectionTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConnectionTypeDataTable cln = ((ConnectionTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConnectionTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionTypeRow NewConnectionTypeRow() {
                return ((ConnectionTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConnectionTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConnectionTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConnectionTypeRowChanged != null)) {
                    this.ConnectionTypeRowChanged(this, new ConnectionTypeRowChangeEvent(((ConnectionTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConnectionTypeRowChanging != null)) {
                    this.ConnectionTypeRowChanging(this, new ConnectionTypeRowChangeEvent(((ConnectionTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConnectionTypeRowDeleted != null)) {
                    this.ConnectionTypeRowDeleted(this, new ConnectionTypeRowChangeEvent(((ConnectionTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConnectionTypeRowDeleting != null)) {
                    this.ConnectionTypeRowDeleting(this, new ConnectionTypeRowChangeEvent(((ConnectionTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConnectionTypeRow(ConnectionTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TDSettings ds = new TDSettings();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConnectionTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConnectionDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnConnectionId;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnConnectionName;
            
            private global::System.Data.DataColumn columnURL;
            
            private global::System.Data.DataColumn columnUserName;
            
            private global::System.Data.DataColumn columnPassword;
            
            private global::System.Data.DataColumn columnRememberPassword;
            
            private global::System.Data.DataColumn columnActiveUser;
            
            private global::System.Data.DataColumn columnVersion;
            
            private global::System.Data.DataColumn columnCharset;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionDataTable() {
                this.TableName = "Connection";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConnectionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConnectionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConnectionIdColumn {
                get {
                    return this.columnConnectionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConnectionNameColumn {
                get {
                    return this.columnConnectionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn URLColumn {
                get {
                    return this.columnURL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RememberPasswordColumn {
                get {
                    return this.columnRememberPassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveUserColumn {
                get {
                    return this.columnActiveUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VersionColumn {
                get {
                    return this.columnVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CharsetColumn {
                get {
                    return this.columnCharset;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionRow this[int index] {
                get {
                    return ((ConnectionRow)(this.Rows[index]));
                }
            }
            
            public event ConnectionRowChangeEventHandler ConnectionRowChanging;
            
            public event ConnectionRowChangeEventHandler ConnectionRowChanged;
            
            public event ConnectionRowChangeEventHandler ConnectionRowDeleting;
            
            public event ConnectionRowChangeEventHandler ConnectionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConnectionRow(ConnectionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionRow AddConnectionRow(ConnectionTypeRow parentConnectionTypeRowByRel_ConnectionType, string ConnectionName, string URL, string UserName, string Password, bool RememberPassword, bool ActiveUser, string Version, string Charset) {
                ConnectionRow rowConnectionRow = ((ConnectionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        ConnectionName,
                        URL,
                        UserName,
                        Password,
                        RememberPassword,
                        ActiveUser,
                        Version,
                        Charset};
                if ((parentConnectionTypeRowByRel_ConnectionType != null)) {
                    columnValuesArray[1] = parentConnectionTypeRowByRel_ConnectionType[0];
                }
                rowConnectionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConnectionRow);
                return rowConnectionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionRow FindByConnectionId(int ConnectionId) {
                return ((ConnectionRow)(this.Rows.Find(new object[] {
                            ConnectionId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConnectionDataTable cln = ((ConnectionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConnectionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnConnectionId = base.Columns["ConnectionId"];
                this.columnType = base.Columns["Type"];
                this.columnConnectionName = base.Columns["ConnectionName"];
                this.columnURL = base.Columns["URL"];
                this.columnUserName = base.Columns["UserName"];
                this.columnPassword = base.Columns["Password"];
                this.columnRememberPassword = base.Columns["RememberPassword"];
                this.columnActiveUser = base.Columns["ActiveUser"];
                this.columnVersion = base.Columns["Version"];
                this.columnCharset = base.Columns["Charset"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnConnectionId = new global::System.Data.DataColumn("ConnectionId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConnectionId);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnConnectionName = new global::System.Data.DataColumn("ConnectionName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConnectionName);
                this.columnURL = new global::System.Data.DataColumn("URL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnURL);
                this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnPassword = new global::System.Data.DataColumn("Password", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnRememberPassword = new global::System.Data.DataColumn("RememberPassword", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRememberPassword);
                this.columnActiveUser = new global::System.Data.DataColumn("ActiveUser", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActiveUser);
                this.columnVersion = new global::System.Data.DataColumn("Version", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersion);
                this.columnCharset = new global::System.Data.DataColumn("Charset", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCharset);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnConnectionId}, true));
                this.columnConnectionId.AutoIncrement = true;
                this.columnConnectionId.AutoIncrementSeed = 1;
                this.columnConnectionId.AllowDBNull = false;
                this.columnConnectionId.Unique = true;
                this.columnType.AllowDBNull = false;
                this.columnConnectionName.AllowDBNull = false;
                this.columnURL.AllowDBNull = false;
                this.columnUserName.AllowDBNull = false;
                this.columnRememberPassword.AllowDBNull = false;
                this.columnRememberPassword.DefaultValue = ((bool)(false));
                this.columnActiveUser.AllowDBNull = false;
                this.columnActiveUser.DefaultValue = ((bool)(false));
                this.columnVersion.AllowDBNull = false;
                this.columnVersion.DefaultValue = ((string)("2.0"));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionRow NewConnectionRow() {
                return ((ConnectionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConnectionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConnectionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConnectionRowChanged != null)) {
                    this.ConnectionRowChanged(this, new ConnectionRowChangeEvent(((ConnectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConnectionRowChanging != null)) {
                    this.ConnectionRowChanging(this, new ConnectionRowChangeEvent(((ConnectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConnectionRowDeleted != null)) {
                    this.ConnectionRowDeleted(this, new ConnectionRowChangeEvent(((ConnectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConnectionRowDeleting != null)) {
                    this.ConnectionRowDeleting(this, new ConnectionRowChangeEvent(((ConnectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConnectionRow(ConnectionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TDSettings ds = new TDSettings();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConnectionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GlobalSettingsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMainFormHeight;
            
            private global::System.Data.DataColumn columnMainFormWidth;
            
            private global::System.Data.DataColumn columnMainFormTop;
            
            private global::System.Data.DataColumn columnMainFormLeft;
            
            private global::System.Data.DataColumn columnMainFormMaximized;
            
            private global::System.Data.DataColumn columnTreePanelWidth;
            
            private global::System.Data.DataColumn columnShowLoadingForm;
            
            private global::System.Data.DataColumn columnConfirmSuccessfullyEditBug;
            
            private global::System.Data.DataColumn columnShowBugsCount;
            
            private global::System.Data.DataColumn columnReportFilesPath;
            
            private global::System.Data.DataColumn columnCheckForUpdate;
            
            private global::System.Data.DataColumn columnLastMyZillaVersion;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalSettingsDataTable() {
                this.TableName = "GlobalSettings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GlobalSettingsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GlobalSettingsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MainFormHeightColumn {
                get {
                    return this.columnMainFormHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MainFormWidthColumn {
                get {
                    return this.columnMainFormWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MainFormTopColumn {
                get {
                    return this.columnMainFormTop;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MainFormLeftColumn {
                get {
                    return this.columnMainFormLeft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MainFormMaximizedColumn {
                get {
                    return this.columnMainFormMaximized;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TreePanelWidthColumn {
                get {
                    return this.columnTreePanelWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShowLoadingFormColumn {
                get {
                    return this.columnShowLoadingForm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConfirmSuccessfullyEditBugColumn {
                get {
                    return this.columnConfirmSuccessfullyEditBug;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShowBugsCountColumn {
                get {
                    return this.columnShowBugsCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReportFilesPathColumn {
                get {
                    return this.columnReportFilesPath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckForUpdateColumn {
                get {
                    return this.columnCheckForUpdate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastMyZillaVersionColumn {
                get {
                    return this.columnLastMyZillaVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalSettingsRow this[int index] {
                get {
                    return ((GlobalSettingsRow)(this.Rows[index]));
                }
            }
            
            public event GlobalSettingsRowChangeEventHandler GlobalSettingsRowChanging;
            
            public event GlobalSettingsRowChangeEventHandler GlobalSettingsRowChanged;
            
            public event GlobalSettingsRowChangeEventHandler GlobalSettingsRowDeleting;
            
            public event GlobalSettingsRowChangeEventHandler GlobalSettingsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGlobalSettingsRow(GlobalSettingsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalSettingsRow AddGlobalSettingsRow(int MainFormHeight, int MainFormWidth, int MainFormTop, int MainFormLeft, bool MainFormMaximized, int TreePanelWidth, bool ShowLoadingForm, bool ConfirmSuccessfullyEditBug, bool ShowBugsCount, string ReportFilesPath, bool CheckForUpdate, string LastMyZillaVersion) {
                GlobalSettingsRow rowGlobalSettingsRow = ((GlobalSettingsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MainFormHeight,
                        MainFormWidth,
                        MainFormTop,
                        MainFormLeft,
                        MainFormMaximized,
                        TreePanelWidth,
                        ShowLoadingForm,
                        ConfirmSuccessfullyEditBug,
                        ShowBugsCount,
                        ReportFilesPath,
                        CheckForUpdate,
                        LastMyZillaVersion};
                rowGlobalSettingsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGlobalSettingsRow);
                return rowGlobalSettingsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GlobalSettingsDataTable cln = ((GlobalSettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GlobalSettingsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMainFormHeight = base.Columns["MainFormHeight"];
                this.columnMainFormWidth = base.Columns["MainFormWidth"];
                this.columnMainFormTop = base.Columns["MainFormTop"];
                this.columnMainFormLeft = base.Columns["MainFormLeft"];
                this.columnMainFormMaximized = base.Columns["MainFormMaximized"];
                this.columnTreePanelWidth = base.Columns["TreePanelWidth"];
                this.columnShowLoadingForm = base.Columns["ShowLoadingForm"];
                this.columnConfirmSuccessfullyEditBug = base.Columns["ConfirmSuccessfullyEditBug"];
                this.columnShowBugsCount = base.Columns["ShowBugsCount"];
                this.columnReportFilesPath = base.Columns["ReportFilesPath"];
                this.columnCheckForUpdate = base.Columns["CheckForUpdate"];
                this.columnLastMyZillaVersion = base.Columns["LastMyZillaVersion"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMainFormHeight = new global::System.Data.DataColumn("MainFormHeight", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainFormHeight);
                this.columnMainFormWidth = new global::System.Data.DataColumn("MainFormWidth", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainFormWidth);
                this.columnMainFormTop = new global::System.Data.DataColumn("MainFormTop", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainFormTop);
                this.columnMainFormLeft = new global::System.Data.DataColumn("MainFormLeft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainFormLeft);
                this.columnMainFormMaximized = new global::System.Data.DataColumn("MainFormMaximized", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainFormMaximized);
                this.columnTreePanelWidth = new global::System.Data.DataColumn("TreePanelWidth", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTreePanelWidth);
                this.columnShowLoadingForm = new global::System.Data.DataColumn("ShowLoadingForm", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShowLoadingForm);
                this.columnConfirmSuccessfullyEditBug = new global::System.Data.DataColumn("ConfirmSuccessfullyEditBug", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfirmSuccessfullyEditBug);
                this.columnShowBugsCount = new global::System.Data.DataColumn("ShowBugsCount", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShowBugsCount);
                this.columnReportFilesPath = new global::System.Data.DataColumn("ReportFilesPath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportFilesPath);
                this.columnCheckForUpdate = new global::System.Data.DataColumn("CheckForUpdate", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckForUpdate);
                this.columnLastMyZillaVersion = new global::System.Data.DataColumn("LastMyZillaVersion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastMyZillaVersion);
                this.columnMainFormHeight.DefaultValue = ((int)(600));
                this.columnMainFormWidth.DefaultValue = ((int)(800));
                this.columnMainFormTop.DefaultValue = ((int)(-1));
                this.columnMainFormLeft.DefaultValue = ((int)(-1));
                this.columnMainFormMaximized.DefaultValue = ((bool)(false));
                this.columnTreePanelWidth.DefaultValue = ((int)(180));
                this.columnShowLoadingForm.AllowDBNull = false;
                this.columnShowLoadingForm.DefaultValue = ((bool)(true));
                this.columnConfirmSuccessfullyEditBug.AllowDBNull = false;
                this.columnConfirmSuccessfullyEditBug.DefaultValue = ((bool)(true));
                this.columnShowBugsCount.AllowDBNull = false;
                this.columnShowBugsCount.DefaultValue = ((bool)(true));
                this.columnCheckForUpdate.DefaultValue = ((bool)(true));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalSettingsRow NewGlobalSettingsRow() {
                return ((GlobalSettingsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GlobalSettingsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GlobalSettingsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GlobalSettingsRowChanged != null)) {
                    this.GlobalSettingsRowChanged(this, new GlobalSettingsRowChangeEvent(((GlobalSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GlobalSettingsRowChanging != null)) {
                    this.GlobalSettingsRowChanging(this, new GlobalSettingsRowChangeEvent(((GlobalSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GlobalSettingsRowDeleted != null)) {
                    this.GlobalSettingsRowDeleted(this, new GlobalSettingsRowChangeEvent(((GlobalSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GlobalSettingsRowDeleting != null)) {
                    this.GlobalSettingsRowDeleting(this, new GlobalSettingsRowChangeEvent(((GlobalSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGlobalSettingsRow(GlobalSettingsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TDSettings ds = new TDSettings();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GlobalSettingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PreferencesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnConnectionId;
            
            private global::System.Data.DataColumn columnExpandTree;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PreferencesDataTable() {
                this.TableName = "Preferences";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PreferencesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PreferencesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConnectionIdColumn {
                get {
                    return this.columnConnectionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpandTreeColumn {
                get {
                    return this.columnExpandTree;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PreferencesRow this[int index] {
                get {
                    return ((PreferencesRow)(this.Rows[index]));
                }
            }
            
            public event PreferencesRowChangeEventHandler PreferencesRowChanging;
            
            public event PreferencesRowChangeEventHandler PreferencesRowChanged;
            
            public event PreferencesRowChangeEventHandler PreferencesRowDeleting;
            
            public event PreferencesRowChangeEventHandler PreferencesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPreferencesRow(PreferencesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PreferencesRow AddPreferencesRow(ConnectionRow parentConnectionRowByRel_Conn, bool ExpandTree) {
                PreferencesRow rowPreferencesRow = ((PreferencesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ExpandTree};
                if ((parentConnectionRowByRel_Conn != null)) {
                    columnValuesArray[0] = parentConnectionRowByRel_Conn[0];
                }
                rowPreferencesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPreferencesRow);
                return rowPreferencesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PreferencesDataTable cln = ((PreferencesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PreferencesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnConnectionId = base.Columns["ConnectionId"];
                this.columnExpandTree = base.Columns["ExpandTree"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnConnectionId = new global::System.Data.DataColumn("ConnectionId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConnectionId);
                this.columnExpandTree = new global::System.Data.DataColumn("ExpandTree", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpandTree);
                this.columnExpandTree.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PreferencesRow NewPreferencesRow() {
                return ((PreferencesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PreferencesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PreferencesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PreferencesRowChanged != null)) {
                    this.PreferencesRowChanged(this, new PreferencesRowChangeEvent(((PreferencesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PreferencesRowChanging != null)) {
                    this.PreferencesRowChanging(this, new PreferencesRowChangeEvent(((PreferencesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PreferencesRowDeleted != null)) {
                    this.PreferencesRowDeleted(this, new PreferencesRowChangeEvent(((PreferencesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PreferencesRowDeleting != null)) {
                    this.PreferencesRowDeleting(this, new PreferencesRowChangeEvent(((PreferencesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePreferencesRow(PreferencesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TDSettings ds = new TDSettings();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PreferencesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ColumnsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnConnectionId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnLabel;
            
            private global::System.Data.DataColumn columnWidth;
            
            private global::System.Data.DataColumn columnSort;
            
            private global::System.Data.DataColumn columnSortIndex;
            
            private global::System.Data.DataColumn columnDisplayIndex;
            
            private global::System.Data.DataColumn columnVisible;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ColumnsDataTable() {
                this.TableName = "Columns";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ColumnsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ColumnsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConnectionIdColumn {
                get {
                    return this.columnConnectionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LabelColumn {
                get {
                    return this.columnLabel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WidthColumn {
                get {
                    return this.columnWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SortColumn {
                get {
                    return this.columnSort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SortIndexColumn {
                get {
                    return this.columnSortIndex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DisplayIndexColumn {
                get {
                    return this.columnDisplayIndex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VisibleColumn {
                get {
                    return this.columnVisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ColumnsRow this[int index] {
                get {
                    return ((ColumnsRow)(this.Rows[index]));
                }
            }
            
            public event ColumnsRowChangeEventHandler ColumnsRowChanging;
            
            public event ColumnsRowChangeEventHandler ColumnsRowChanged;
            
            public event ColumnsRowChangeEventHandler ColumnsRowDeleting;
            
            public event ColumnsRowChangeEventHandler ColumnsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddColumnsRow(ColumnsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ColumnsRow AddColumnsRow(int ConnectionId, string Name, string Label, int Width, byte Sort, byte SortIndex, int DisplayIndex, bool Visible) {
                ColumnsRow rowColumnsRow = ((ColumnsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ConnectionId,
                        Name,
                        Label,
                        Width,
                        Sort,
                        SortIndex,
                        DisplayIndex,
                        Visible};
                rowColumnsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowColumnsRow);
                return rowColumnsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ColumnsRow FindById(int Id) {
                return ((ColumnsRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ColumnsDataTable cln = ((ColumnsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ColumnsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnConnectionId = base.Columns["ConnectionId"];
                this.columnName = base.Columns["Name"];
                this.columnLabel = base.Columns["Label"];
                this.columnWidth = base.Columns["Width"];
                this.columnSort = base.Columns["Sort"];
                this.columnSortIndex = base.Columns["SortIndex"];
                this.columnDisplayIndex = base.Columns["DisplayIndex"];
                this.columnVisible = base.Columns["Visible"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnConnectionId = new global::System.Data.DataColumn("ConnectionId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConnectionId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnLabel = new global::System.Data.DataColumn("Label", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabel);
                this.columnWidth = new global::System.Data.DataColumn("Width", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWidth);
                this.columnSort = new global::System.Data.DataColumn("Sort", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSort);
                this.columnSortIndex = new global::System.Data.DataColumn("SortIndex", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSortIndex);
                this.columnDisplayIndex = new global::System.Data.DataColumn("DisplayIndex", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDisplayIndex);
                this.columnVisible = new global::System.Data.DataColumn("Visible", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisible);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnSort.DefaultValue = ((byte)(0));
                this.columnSortIndex.DefaultValue = ((byte)(0));
                this.columnDisplayIndex.DefaultValue = ((int)(1));
                this.columnVisible.DefaultValue = ((bool)(true));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ColumnsRow NewColumnsRow() {
                return ((ColumnsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ColumnsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ColumnsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ColumnsRowChanged != null)) {
                    this.ColumnsRowChanged(this, new ColumnsRowChangeEvent(((ColumnsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ColumnsRowChanging != null)) {
                    this.ColumnsRowChanging(this, new ColumnsRowChangeEvent(((ColumnsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ColumnsRowDeleted != null)) {
                    this.ColumnsRowDeleted(this, new ColumnsRowChangeEvent(((ColumnsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ColumnsRowDeleting != null)) {
                    this.ColumnsRowDeleting(this, new ColumnsRowChangeEvent(((ColumnsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveColumnsRow(ColumnsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TDSettings ds = new TDSettings();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ColumnsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConnectionTypeRow : global::System.Data.DataRow {
            
            private ConnectionTypeDataTable tableConnectionType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConnectionTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConnectionType = ((ConnectionTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableConnectionType.NameColumn]));
                }
                set {
                    this[this.tableConnectionType.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionRow[] GetConnectionRows() {
                if ((this.Table.ChildRelations["Rel_ConnectionType"] == null)) {
                    return new ConnectionRow[0];
                }
                else {
                    return ((ConnectionRow[])(base.GetChildRows(this.Table.ChildRelations["Rel_ConnectionType"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConnectionRow : global::System.Data.DataRow {
            
            private ConnectionDataTable tableConnection;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConnectionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConnection = ((ConnectionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConnectionId {
                get {
                    return ((int)(this[this.tableConnection.ConnectionIdColumn]));
                }
                set {
                    this[this.tableConnection.ConnectionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    return ((string)(this[this.tableConnection.TypeColumn]));
                }
                set {
                    this[this.tableConnection.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConnectionName {
                get {
                    return ((string)(this[this.tableConnection.ConnectionNameColumn]));
                }
                set {
                    this[this.tableConnection.ConnectionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string URL {
                get {
                    return ((string)(this[this.tableConnection.URLColumn]));
                }
                set {
                    this[this.tableConnection.URLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    return ((string)(this[this.tableConnection.UserNameColumn]));
                }
                set {
                    this[this.tableConnection.UserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    try {
                        return ((string)(this[this.tableConnection.PasswordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Password\' in table \'Connection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConnection.PasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RememberPassword {
                get {
                    return ((bool)(this[this.tableConnection.RememberPasswordColumn]));
                }
                set {
                    this[this.tableConnection.RememberPasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ActiveUser {
                get {
                    return ((bool)(this[this.tableConnection.ActiveUserColumn]));
                }
                set {
                    this[this.tableConnection.ActiveUserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Version {
                get {
                    return ((string)(this[this.tableConnection.VersionColumn]));
                }
                set {
                    this[this.tableConnection.VersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Charset {
                get {
                    if (this.IsCharsetNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableConnection.CharsetColumn]));
                    }
                }
                set {
                    this[this.tableConnection.CharsetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionTypeRow ConnectionTypeRow {
                get {
                    return ((ConnectionTypeRow)(this.GetParentRow(this.Table.ParentRelations["Rel_ConnectionType"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Rel_ConnectionType"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPasswordNull() {
                return this.IsNull(this.tableConnection.PasswordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPasswordNull() {
                this[this.tableConnection.PasswordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCharsetNull() {
                return this.IsNull(this.tableConnection.CharsetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCharsetNull() {
                this[this.tableConnection.CharsetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PreferencesRow[] GetPreferencesRows() {
                if ((this.Table.ChildRelations["Rel_Conn"] == null)) {
                    return new PreferencesRow[0];
                }
                else {
                    return ((PreferencesRow[])(base.GetChildRows(this.Table.ChildRelations["Rel_Conn"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GlobalSettingsRow : global::System.Data.DataRow {
            
            private GlobalSettingsDataTable tableGlobalSettings;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GlobalSettingsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGlobalSettings = ((GlobalSettingsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MainFormHeight {
                get {
                    try {
                        return ((int)(this[this.tableGlobalSettings.MainFormHeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MainFormHeight\' in table \'GlobalSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGlobalSettings.MainFormHeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MainFormWidth {
                get {
                    try {
                        return ((int)(this[this.tableGlobalSettings.MainFormWidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MainFormWidth\' in table \'GlobalSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGlobalSettings.MainFormWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MainFormTop {
                get {
                    try {
                        return ((int)(this[this.tableGlobalSettings.MainFormTopColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MainFormTop\' in table \'GlobalSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGlobalSettings.MainFormTopColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MainFormLeft {
                get {
                    try {
                        return ((int)(this[this.tableGlobalSettings.MainFormLeftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MainFormLeft\' in table \'GlobalSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGlobalSettings.MainFormLeftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MainFormMaximized {
                get {
                    try {
                        return ((bool)(this[this.tableGlobalSettings.MainFormMaximizedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MainFormMaximized\' in table \'GlobalSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGlobalSettings.MainFormMaximizedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TreePanelWidth {
                get {
                    try {
                        return ((int)(this[this.tableGlobalSettings.TreePanelWidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TreePanelWidth\' in table \'GlobalSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGlobalSettings.TreePanelWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ShowLoadingForm {
                get {
                    return ((bool)(this[this.tableGlobalSettings.ShowLoadingFormColumn]));
                }
                set {
                    this[this.tableGlobalSettings.ShowLoadingFormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ConfirmSuccessfullyEditBug {
                get {
                    return ((bool)(this[this.tableGlobalSettings.ConfirmSuccessfullyEditBugColumn]));
                }
                set {
                    this[this.tableGlobalSettings.ConfirmSuccessfullyEditBugColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ShowBugsCount {
                get {
                    return ((bool)(this[this.tableGlobalSettings.ShowBugsCountColumn]));
                }
                set {
                    this[this.tableGlobalSettings.ShowBugsCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReportFilesPath {
                get {
                    try {
                        return ((string)(this[this.tableGlobalSettings.ReportFilesPathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReportFilesPath\' in table \'GlobalSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGlobalSettings.ReportFilesPathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CheckForUpdate {
                get {
                    try {
                        return ((bool)(this[this.tableGlobalSettings.CheckForUpdateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CheckForUpdate\' in table \'GlobalSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGlobalSettings.CheckForUpdateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastMyZillaVersion {
                get {
                    if (this.IsLastMyZillaVersionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGlobalSettings.LastMyZillaVersionColumn]));
                    }
                }
                set {
                    this[this.tableGlobalSettings.LastMyZillaVersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMainFormHeightNull() {
                return this.IsNull(this.tableGlobalSettings.MainFormHeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMainFormHeightNull() {
                this[this.tableGlobalSettings.MainFormHeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMainFormWidthNull() {
                return this.IsNull(this.tableGlobalSettings.MainFormWidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMainFormWidthNull() {
                this[this.tableGlobalSettings.MainFormWidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMainFormTopNull() {
                return this.IsNull(this.tableGlobalSettings.MainFormTopColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMainFormTopNull() {
                this[this.tableGlobalSettings.MainFormTopColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMainFormLeftNull() {
                return this.IsNull(this.tableGlobalSettings.MainFormLeftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMainFormLeftNull() {
                this[this.tableGlobalSettings.MainFormLeftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMainFormMaximizedNull() {
                return this.IsNull(this.tableGlobalSettings.MainFormMaximizedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMainFormMaximizedNull() {
                this[this.tableGlobalSettings.MainFormMaximizedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTreePanelWidthNull() {
                return this.IsNull(this.tableGlobalSettings.TreePanelWidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTreePanelWidthNull() {
                this[this.tableGlobalSettings.TreePanelWidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReportFilesPathNull() {
                return this.IsNull(this.tableGlobalSettings.ReportFilesPathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReportFilesPathNull() {
                this[this.tableGlobalSettings.ReportFilesPathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckForUpdateNull() {
                return this.IsNull(this.tableGlobalSettings.CheckForUpdateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckForUpdateNull() {
                this[this.tableGlobalSettings.CheckForUpdateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastMyZillaVersionNull() {
                return this.IsNull(this.tableGlobalSettings.LastMyZillaVersionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastMyZillaVersionNull() {
                this[this.tableGlobalSettings.LastMyZillaVersionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PreferencesRow : global::System.Data.DataRow {
            
            private PreferencesDataTable tablePreferences;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PreferencesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePreferences = ((PreferencesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConnectionId {
                get {
                    try {
                        return ((int)(this[this.tablePreferences.ConnectionIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConnectionId\' in table \'Preferences\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePreferences.ConnectionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ExpandTree {
                get {
                    return ((bool)(this[this.tablePreferences.ExpandTreeColumn]));
                }
                set {
                    this[this.tablePreferences.ExpandTreeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionRow ConnectionRow {
                get {
                    return ((ConnectionRow)(this.GetParentRow(this.Table.ParentRelations["Rel_Conn"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Rel_Conn"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConnectionIdNull() {
                return this.IsNull(this.tablePreferences.ConnectionIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConnectionIdNull() {
                this[this.tablePreferences.ConnectionIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ColumnsRow : global::System.Data.DataRow {
            
            private ColumnsDataTable tableColumns;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ColumnsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableColumns = ((ColumnsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableColumns.IdColumn]));
                }
                set {
                    this[this.tableColumns.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConnectionId {
                get {
                    try {
                        return ((int)(this[this.tableColumns.ConnectionIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConnectionId\' in table \'Columns\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableColumns.ConnectionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableColumns.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Columns\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableColumns.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Label {
                get {
                    try {
                        return ((string)(this[this.tableColumns.LabelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Label\' in table \'Columns\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableColumns.LabelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Width {
                get {
                    try {
                        return ((int)(this[this.tableColumns.WidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Width\' in table \'Columns\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableColumns.WidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Sort {
                get {
                    try {
                        return ((byte)(this[this.tableColumns.SortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sort\' in table \'Columns\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableColumns.SortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte SortIndex {
                get {
                    try {
                        return ((byte)(this[this.tableColumns.SortIndexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SortIndex\' in table \'Columns\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableColumns.SortIndexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DisplayIndex {
                get {
                    try {
                        return ((int)(this[this.tableColumns.DisplayIndexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DisplayIndex\' in table \'Columns\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableColumns.DisplayIndexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Visible {
                get {
                    try {
                        return ((bool)(this[this.tableColumns.VisibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Visible\' in table \'Columns\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableColumns.VisibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConnectionIdNull() {
                return this.IsNull(this.tableColumns.ConnectionIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConnectionIdNull() {
                this[this.tableColumns.ConnectionIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableColumns.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableColumns.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabelNull() {
                return this.IsNull(this.tableColumns.LabelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabelNull() {
                this[this.tableColumns.LabelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWidthNull() {
                return this.IsNull(this.tableColumns.WidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWidthNull() {
                this[this.tableColumns.WidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSortNull() {
                return this.IsNull(this.tableColumns.SortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSortNull() {
                this[this.tableColumns.SortColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSortIndexNull() {
                return this.IsNull(this.tableColumns.SortIndexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSortIndexNull() {
                this[this.tableColumns.SortIndexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisplayIndexNull() {
                return this.IsNull(this.tableColumns.DisplayIndexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisplayIndexNull() {
                this[this.tableColumns.DisplayIndexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVisibleNull() {
                return this.IsNull(this.tableColumns.VisibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVisibleNull() {
                this[this.tableColumns.VisibleColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConnectionTypeRowChangeEvent : global::System.EventArgs {
            
            private ConnectionTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionTypeRowChangeEvent(ConnectionTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConnectionRowChangeEvent : global::System.EventArgs {
            
            private ConnectionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionRowChangeEvent(ConnectionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConnectionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GlobalSettingsRowChangeEvent : global::System.EventArgs {
            
            private GlobalSettingsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalSettingsRowChangeEvent(GlobalSettingsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalSettingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PreferencesRowChangeEvent : global::System.EventArgs {
            
            private PreferencesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PreferencesRowChangeEvent(PreferencesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PreferencesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ColumnsRowChangeEvent : global::System.EventArgs {
            
            private ColumnsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ColumnsRowChangeEvent(ColumnsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ColumnsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591